(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{371:function(e,t,r){"use strict";r.r(t);var o=r(43),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"跨域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[e._v("#")]),e._v(" 跨域")]),e._v(" "),r("p",[e._v("在前端领域中，跨域是指浏览器允许向服务器发送跨域请求，从而克服Ajax只能"),r("strong",[e._v("同源")]),e._v("使用的限制。")]),e._v(" "),r("p",[r("strong",[e._v("同源策略")])]),e._v(" "),r("p",[r("strong",[e._v("同源策略")]),e._v('是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指"协议+域名+端口"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。')]),e._v(" "),r("p",[e._v("同源策略限制以下几种行为：")]),e._v(" "),r("ul",[r("li",[e._v("Cookie、LocalStorage 和 IndexDB 无法读取")]),e._v(" "),r("li",[e._v("DOM和JS对象无法获得")]),e._v(" "),r("li",[e._v("AJAX 请求不能发送")])]),e._v(" "),r("h2",{attrs:{id:"jsonp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[e._v("#")]),e._v(" JSONP")]),e._v(" "),r("p",[e._v("JSONP 的原理很简单，就是利用 "),r("code",[e._v("<script>")]),e._v(" 标签没有跨域限制的漏洞。通过 "),r("code",[e._v("<script>")]),e._v(" 标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。"),r("strong",[e._v("仅限于GET请求")])]),e._v(" "),r("ul",[r("li",[r("p",[e._v("设置"),r("code",[e._v("url")]),e._v("为提供"),r("code",[e._v("jsonp")]),e._v("服务的"),r("code",[e._v("url")]),e._v("地址，并在该"),r("code",[e._v("url")]),e._v("中设置相关"),r("code",[e._v("callback")]),e._v("参数")])]),e._v(" "),r("li",[r("p",[e._v("创建"),r("code",[e._v("script")]),e._v("标签，并设置其"),r("code",[e._v("src")]),e._v("属性")])]),e._v(" "),r("li",[r("p",[e._v("把"),r("code",[e._v("script")]),e._v("标签加入"),r("code",[e._v("head")]),e._v("，此时调用开始。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('<script src="http://domain/api?param1=a&param2=b&callback=jsonp"><\/script>\n<script>\n    function jsonp(data) {\n    \tconsole.log(data)\n\t}\n<\/script>\n')])])])])]),e._v(" "),r("h2",{attrs:{id:"cors"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[e._v("#")]),e._v(" CORS")]),e._v(" "),r("p",[e._v("跨域资源共享("),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/CORS",target:"_blank",rel:"noopener noreferrer"}},[e._v("CORS"),r("OutboundLink")],1),e._v(") 是一种机制，它使用额外的 "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Glossary/HTTP",target:"_blank",rel:"noopener noreferrer"}},[e._v("HTTP"),r("OutboundLink")],1),e._v(" 头来告诉浏览器 让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器"),r("strong",[e._v("不同的域、协议或端口")]),e._v("请求一个资源时，资源会发起一个"),r("strong",[e._v("跨域 HTTP 请求")]),e._v("。")]),e._v(" "),r("p",[e._v("CORS背后的基本思想就是"),r("strong",[e._v("使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是应该成功还是失败。")])]),e._v(" "),r("p",[e._v("实现CORS通信的关键是服务器。"),r("strong",[e._v("只要服务器实现了CORS接口，就可以跨源通信。")])]),e._v(" "),r("p",[e._v("服务器端对于CORS的支持，主要就是通过设置"),r("strong",[e._v("Access-Control-Allow-Origin")]),e._v("来进行的。该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。")]),e._v(" "),r("h3",{attrs:{id:"简单请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#简单请求"}},[e._v("#")]),e._v(" 简单请求")]),e._v(" "),r("p",[e._v("某些请求不会触发 "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#Preflighted_requests",target:"_blank",rel:"noopener noreferrer"}},[e._v("CORS 预检请求"),r("OutboundLink")],1),e._v("。称这样的请求为“简单请求”。若请求满足所有下述条件，则该请求可视为“简单请求”：")]),e._v(" "),r("ul",[r("li",[r("p",[r("strong",[e._v("Accept-Control-Request-Method")])]),e._v(" "),r("p",[e._v("使用下列方法之一：")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("GET")]),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/HEAD",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("HEAD")]),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("POST")]),r("OutboundLink")],1)])])]),e._v(" "),r("li",[r("p",[r("strong",[e._v("Accept-Control-Request-Headers")])]),e._v(" "),r("p",[e._v("除了被用户代理自动设置的首部字段（例如 "),r("code",[e._v("Connection")]),e._v("，"),r("code",[e._v("User-Agent")]),e._v("）和在 Fetch 规范中定义为 禁用首部名称的其他首部，允许人为设置的字段为 Fetch 规范定义的 对 CORS 安全的首部字段集合。该集合为：")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("Accept")]),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Language",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("Accept-Language")]),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Language",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("Content-Language")]),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("Content-Type")]),r("OutboundLink")],1),e._v(" （需要注意额外的限制）")]),e._v(" "),r("li",[r("code",[e._v("DPR")])]),e._v(" "),r("li",[r("code",[e._v("Downlink")])]),e._v(" "),r("li",[r("code",[e._v("Save-Data")])]),e._v(" "),r("li",[r("code",[e._v("Viewport-Width")])]),e._v(" "),r("li",[r("code",[e._v("Width")])])])]),e._v(" "),r("li",[r("p",[r("code",[e._v("Content-Type")]),e._v("的值仅限于下列三者之一：")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("text/plain")])]),e._v(" "),r("li",[r("code",[e._v("multipart/form-data")])]),e._v(" "),r("li",[r("code",[e._v("application/x-www-form-urlencoded")])])])]),e._v(" "),r("li",[r("p",[e._v("请求中的任意"),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestUpload",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("XMLHttpRequestUpload")]),r("OutboundLink")],1),e._v(" 对象均没有注册任何事件监听器；"),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestUpload",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("XMLHttpRequestUpload")]),r("OutboundLink")],1),e._v(" 对象可以使用 "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/upload",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("XMLHttpRequest.upload")]),r("OutboundLink")],1),e._v(" 属性访问。")])]),e._v(" "),r("li",[r("p",[e._v("请求中没有使用 "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("ReadableStream")]),r("OutboundLink")],1),e._v(" 对象。")]),e._v(" "),r("p",[r("strong",[e._v("使用")])]),e._v(" "),r("p",[e._v("比如说，假如站点 "),r("code",[e._v("http://foo.example")]),e._v(" 的网页应用想要访问 "),r("code",[e._v("http://bar.other")]),e._v(" 的资源。")]),e._v(" "),r("p",[e._v("则请求报文中的"),r("code",[e._v("Origin: http://foo.example")])]),e._v(" "),r("p",[e._v("响应报文中的"),r("code",[e._v("Access-Control-Allow-Origin: *")]),e._v("，*表示该资源可以被任意外域访问，也可以设置为"),r("code",[e._v("Access-Control-Allow-Origin: http://foo.example")]),e._v("表示服务端仅允许来自 "),r("code",[e._v("http://foo.example")]),e._v(" 的访问")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://mdn.mozillademos.org/files/17214/simple-req-updated.png",alt:"img"}})]),e._v(" "),r("h3",{attrs:{id:"预检请求"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#预检请求"}},[e._v("#")]),e._v(" 预检请求")]),e._v(" "),r("p",[e._v("与前述简单请求不同，“需预检的请求”要求必须首先使用 "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("OPTIONS")]),r("OutboundLink")],1),e._v('  方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。"预检请求“的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。')]),e._v(" "),r("p",[r("img",{attrs:{src:"https://mdn.mozillademos.org/files/16753/preflight_correct.png",alt:"img"}})]),e._v(" "),r("p",[e._v("客户端先发送预检请求，预检请求完成后，发送实际请求")])])]),e._v(" "),r("h2",{attrs:{id:"postmessage"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#postmessage"}},[e._v("#")]),e._v(" postMessage")]),e._v(" "),r("p",[r("strong",[e._v("window.postMessage()")]),e._v(" 方法可以安全地实现跨源通信。通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为https），端口号（443为https的默认值），以及主机 (两个页面的模数 "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/domain",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("Document.domain")]),r("OutboundLink")],1),e._v("设置为相同的值) 时，这两个脚本才能相互通信。"),r("strong",[e._v("window.postMessage()")]),e._v(" 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全。")]),e._v(" "),r("p",[e._v("从广义上讲，一个窗口可以获得对另一个窗口的引用（比如 "),r("code",[e._v("targetWindow = window.opener")]),e._v("），然后在窗口上调用 "),r("code",[e._v("targetWindow.postMessage()")]),e._v(" 方法分发一个  "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MessageEvent",target:"_blank",rel:"noopener noreferrer"}},[r("code",[e._v("MessageEvent")]),r("OutboundLink")],1),e._v(" 消息。接收消息的窗口可以根据需要自由"),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/Guide/Events",target:"_blank",rel:"noopener noreferrer"}},[e._v("处理此事件"),r("OutboundLink")],1),e._v("。传递给 window.postMessage() 的参数（比如 message ）将"),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage#The_dispatched_event",target:"_blank",rel:"noopener noreferrer"}},[e._v("通过消息事件对象暴露给接收消息的窗口"),r("OutboundLink")],1),e._v("。")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN文档"),r("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);